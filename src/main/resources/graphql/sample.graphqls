schema {
  query: Query
  mutation: Mutation
}

type Query {
  getString: String
}

type Mutation {
  myMutation(id1: ID!, id2: ID!, input: [MyMutationInput!]!): MyMutationPayload!
}

scalar ID
scalar DateTime

input MyMutationInput {
  employeeGroupId: ID
  validityPeriod: OptionalDateTimePeriodInput!
}

input OptionalDateTimePeriodInput {
  from: DateTime
  to: DateTime
}

union MyMutationPayload = MyMutationResult | MyMutationErrors

type MyMutationResult {
  status: String
}

type MyMutationErrors {
  errors: [MyMutationError!]!
}

union MyMutationError = EmployeeGroupViewErrorStarted | EmployeeGroupViewErrorInvalidFrom

type EmployeeGroupViewErrorStarted implements UserError {
  path: [String!]
  message(localeSpecification: LocaleSpecificationInput): String!
}

type EmployeeGroupViewErrorInvalidFrom implements UserError {
  path: [String!]
  message(localeSpecification: LocaleSpecificationInput): String!
  proposedFrom: DateTime
}

interface UserError {
  message(localeSpecification: LocaleSpecificationInput): String!
  path: [String!]
}

input LocaleSpecificationInput {
  locale: String
  predefinedLocale: PredefinedLocaleType
}

enum PredefinedLocaleType {
  AIRPORT_DEFAULT
  USER_DEFAULT
}
